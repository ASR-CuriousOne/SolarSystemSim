// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#define PI 3.1415926535897932384626433832795

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

Texture2D<float4> HeightMap;
RWTexture2D<float4> NormalMap;

float MapWidth;
float MapHeight;

float HeightMultiplier;

int2 wrapper(int2 texturecoord)
{
    int2 returntexturecoord = int2(0, 0);
    
    if (texturecoord.x > MapWidth - 1)
        returntexturecoord.x = texturecoord.x - MapWidth + 1;
    else if (texturecoord.x < 0)
        returntexturecoord.x = MapWidth - 1 + texturecoord.x;
    else
        returntexturecoord.x = texturecoord.x;
    
    if (texturecoord.y > MapHeight - 1)
        returntexturecoord.y = texturecoord.y - MapHeight + 1;
    else if (texturecoord.y < 0)
        returntexturecoord.y = MapHeight - 1 + texturecoord.y;
    else 
        returntexturecoord.y = texturecoord.y;
    
    return returntexturecoord;
}

float3 GetWorldPos(int2 TextureCoords)
{
    TextureCoords = wrapper(TextureCoords);
    
    float2 uvcoords = float2((float)TextureCoords.x / (float)(MapWidth - 1), (float)TextureCoords.y / (float)(MapHeight - 1));
    
    float ycoord = -cos((uvcoords.y) * PI);
    
    float r = sqrt(1 - ycoord * ycoord);
    
    float3 posOnSphere = float3(sin(uvcoords.x * 2 * PI) * r,ycoord, cos(uvcoords.x * 2 * PI) * r);

    return (posOnSphere + (normalize(posOnSphere) * HeightMap[TextureCoords].r * HeightMultiplier));
}

float3 AverageMatrixAlongRows(float4x3 matr)
{
    return (matr[0] + matr[1] + matr[2] + matr[3]) ;
}

float AverageVectorAlongColumns(float4 vec)
{
    return (vec.x + vec.y + vec.z + vec.w) / 4;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 HeightsNorth = float4(HeightMap[id.xy + int2(3, -2)].r, HeightMap[id.xy + int2(3, -1)].r, HeightMap[id.xy + int2(3, 1)].r, HeightMap[id.xy + int2(3, 2)].r) * HeightMultiplier;
    float4 HeightsSouth = float4(HeightMap[id.xy + int2(-3, -2)].r, HeightMap[id.xy + int2(-3, -1)].r, HeightMap[id.xy + int2(-3, 1)].r, HeightMap[id.xy + int2(-3, 2)].r) * HeightMultiplier;
    float4 HeightsEast = float4(HeightMap[id.xy + int2(-2, 3)].r, HeightMap[id.xy + int2(-1, 3)].r, HeightMap[id.xy + int2(1, 3)].r, HeightMap[id.xy + int2(2, 3)].r) * HeightMultiplier;
    float4 HeightsWest = float4(HeightMap[id.xy + int2(-2, -3)].r, HeightMap[id.xy + int2(-1, -3)].r, HeightMap[id.xy + int2(1, -3)].r, HeightMap[id.xy + int2(2, -3)].r) * HeightMultiplier;

    float3 SlopeSouthToNorth = float3(1, 0, AverageVectorAlongColumns(HeightsNorth - HeightsSouth));
    float3 SlopeWestToEast = float3(0, 1, AverageVectorAlongColumns(HeightsEast - HeightsWest));
    
    float3 normal = float3(-1, -1, 1) * ((normalize(cross(SlopeSouthToNorth, SlopeWestToEast)))) * .5 + .5;
    
    NormalMap[id.xy] = float4(normal,0);
    
}
